buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE")
    }
}

plugins {
    id 'com.craigburke.karma' version '1.4.3'
}

apply plugin: 'java'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
}


karma {
    basePath = project.getProjectDir()
    colors = true
    logLevel = 'DEBUG'

    browsers = ['PhantomJS']
    frameworks = ['jasmine']
    reporters = ['progress', 'junit']

    profile('default')  {
        libraryBases = ['static/vendor/']
        libraryFiles = ['**/jquery.js', '**/angular.js',
                        '**/angular-mocks.js',
                        '**/bootstrap.js', '**/lodash.js', '**/less.js']

        sourceBases = ['static/app/']
        sourceFiles = ['app.js', '**/*.js']

        testBases = ['static/tests/']
        testFiles = [
//                'controller/mock.js',
                '**/*.spec.js'
        ]
    }
}

dependencies {
    compile 'org.webjars:bootstrap:2.1.1'
    compile 'org.webjars:angularjs:1.5.7'
    compile 'org.webjars.bower:less:2.7.1'
    compile 'org.webjars.bower:lodash:4.13.1'
    compile 'org.webjars:angular-ui-router:1.0.0-beta.1'

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")

    testCompile("junit:junit")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task('pretest', type: Copy) {
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { f ->
        def identifier = f.id.componentIdentifier
        if (identifier.group.contains("org.webjars")) {
            copy {
                from zipTree(f.file.toString())
                into file("${buildDir}/webjars-content/${f.name}")
                include "META-INF/resources/webjars/**"
            }
            copy {
                from "${buildDir}/webjars-content/${f.name}/META-INF/resources/webjars/${f.name}/${identifier.version}"
                into "static/vendor/${f.name}"
            }
        }
    }
}

task karmaReload << {
    new File("${project.buildDir}/karma.conf.js").delete()
}

karmaReload.finalizedBy karmaGenerateConfig

karmaReload.shouldRunAfter karmaRun
